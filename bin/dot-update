#!/usr/bin/env bash
# Description: Update all the things

set -Eeuo pipefail

# source helpers
source "$DOTFILES/bin/lib/common.sh"
command_name=$(basename "${BASH_SOURCE[0]}")

usage() {
  cat <<EOF
  $(fmt_key "Usage:") $(fmt_key "$command_name") $(fmt_value "[options] <command>")

  Update all the things. This script can be used to update Neovim plugins,
  update Homebrew packages, and more.

Options:
    -h, --help       Show this help message
    -v, --verbose    Show verbose output
    nvim             Update Neovim plugins
    vim              Alias for updating Neovim plugins
    homebrew         Update Homebrew packages
    brew             Update Homebrew packages
    all              Update everything
EOF
}

update_homebrew() {
  fmt_title_underline "Updating Homebrew packages"
  local log_file=$(mktemp)
  trap 'rm -f "$log_file"' EXIT

  run_with_spinner "brew update > '$log_file' 2>&1 && brew upgrade > '$log_file' 2>&1" 11 "Updating Homebrew"

  if grep -q "Error\|fatal\|Failed" "$log_file"; then
    log_error "Error occurred during update:"
    [[ "$verbose" == true ]] && cat "$log_file"
    exit 1
  fi

  grep -A1 "=>" "$log_file" | grep -v "^--$" || log_info "No updates found"
  echo -e
}

update_nvim_plugins() {
  fmt_title_underline "Updating Neovim plugins"

  local log_file=$(mktemp)
  trap 'rm -f "$log_file"' EXIT

  # Use run_with_spinner helper with style 11 (complex braille pattern)
  run_with_spinner "nvim --headless '+Lazy! sync' +qa > '$log_file' 2>&1" 11 "Updating Neovim plugins"

  # Check for errors
  if grep -q "Error\|ERROR\|Could not\|not installed" "$log_file"; then
    echo "Error occurred during update:"
    rm -f "$temp_lua" "$log_file"
    exit 1
  fi

  grep -i "updated\|installed\|removed" "$log_file" || log_info "No updates found"
  echo -e
}

main() {
  local subcmd=""
  local verbose=false

  if [ $# -lt 1 ]; then
    usage
    exit 0
  fi

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -v | --verbose)
      verbose=true
      shift
      ;;
    *)
      subcmd="$1"
      shift
      ;;
    esac
  done

  case "$subcmd" in
  nvim | vim)
    update_nvim_plugins
    ;;
  homebrew | brew)
    update_homebrew
    ;;
  all)
    update_nvim_plugins
    update_homebrew
    ;;
  *)
    log_error "Unknown $command_name command: $subcmd"
    echo -e
    usage
    exit 1
    ;;
  esac
}

main "$@"
